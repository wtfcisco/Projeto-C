Tema do Projeto: Simulação de Banco em C

Objetivo: Desenvolver um sistema de simulação bancária em C, que permita a criação de contas, depósitos, saques e transferências entre contas.

Estrutura do projeto: O projeto é composto pelos arquivos main.c, que é o código principal; globals.c, que contém nossas estruturas e variáveis globais; e functions.c, onde programamos as funções utilizadas em nosso projeto.

Cadastro de Clientes: Os clientes são cadastrados em um vetor que chamamos de usuarios, por meio de uma estrutura definida em globals.c, chamada Dados. Essa estrutura é composta por nome, CPF, data de nascimento, e-mail, telefone, senha, número da conta bancária, saldo, um contador que usamos para garantir que novas transações sejam cadastradas apenas no próximo índice disponível do nosso vetor transacao, e, por último, um vetor chamado transacao, que é do tipo Extrato — a primeira estrutura que criamos para registrar as transações.
Com ambas as estruturas, Dados e Extrato, criadas, definimos um vetor usuarios que é do tipo Dados e um vetor transacao que é do tipo Extrato. O vetor usuarios recebe os dados do usuário e o vetor transacao recebe as transações realizadas pelo usuário.

Criação de Contas: A função cadastrar_usuario() solicita que o usuário cadastre suas informações para abertura de uma nova conta. Para CPF, e-mail e telefone, iteramos pelo nosso vetor usuarios para verificar se esses dados já foram cadastrados e, caso sim, recusamos o cadastro do usuário, informando respectivamente qual dado já foi cadastrado. Utilizamos uma variável global, contador_usuarios, que está no arquivo globals.c. Essa variável é incrementada a cada novo cadastro de usuário, garantindo que novos usuários sejam sempre cadastrados no próximo índice do vetor usuarios. Ao fim do cadastro, usamos a função gerar_numero() em functions.c para gerar um número aleatório de 4 dígitos e fazemos com que esse número seja atribuído no vetor usuarios, no índice deste novo usuário, no dado conta_bancaria.

Operações Bancárias: Implementamos as funções para saque, depósito e transferência.

Função realizar_saque: Recebe como parâmetro o índice do usuário logado, solicita o valor que deseja sacar e verifica se é maior que zero e se o valor não excede o saldo disponível. Se o saque for bem-sucedido, armazenamos a data e a hora na variável global dataHora, usamos a função strcpy() para copiar a data e hora para o nosso vetor transacao e fazemos o mesmo para o tipo de operação, que, nesse caso, é "Saque". Também armazenamos no vetor o valor que foi sacado e, por fim, incrementamos o contador_transacoes para garantir que a próxima transação seja cadastrada no próximo índice.

Função realizar_deposito: Faz exatamente o mesmo que a função anterior, porém, em vez de subtrair, somamos o valor digitado ao saldo.

Função realizar_transferencia: Recebe como parâmetro o índice do usuário logado e o número da conta ao qual ele deseja fazer a transferência. Iteramos pelo nosso vetor usuarios para localizar a conta bancária do destinatário e, quando a encontramos, armazenamos o índice desse usuário na variável encontrado. Solicitamos o valor a ser transferido e verificamos se é maior que 0 e se temos saldo suficiente. Caso sim, subtraímos o valor da transferência do nosso saldo e o acrescentamos no saldo do destinatário. Após isso, cadastramos a transferência no vetor transacao tanto no índice do remetente quanto no do destinatário, para que ambos possam verificar essa operação em seus extratos. Por fim, incrementamos o contador_transacoes tanto do remetente quanto do destinatário.

Extrato Bancário: Todas as transações dos usuários são cadastradas no vetor transacao, que recebe data e hora, tipo de operação e valor. Usamos a função exibir_extrato(). Essa função recebe o índice do usuário logado e itera por todas as transações, exibindo cada uma. Caso seja transferência, exibimos o nome do destinatário e, caso o usuário tenha recebido uma transferência, exibimos o nome do remetente.

Demais Funções:

Função menu_bancario: Recebe o índice do usuário logado e exibe um menu, lê sua opção e entra em um switch, onde cada opção representa uma função diferente. Caso a opção seja 6, será realizado o logout, permitindo a entrada em outra conta.

Função obter_data_hora: Essa função recebe como parâmetro nossa variável global dataHora e armazena nela a data e a hora, para que possamos exibir no extrato.

Função gerar_numero: Gera um número aleatório de 4 dígitos para atribuir como número da conta do usuário.

Função remover_quebra_linha: Recebe como parâmetro uma string, verifica se o último caractere é '\n' e, caso seja, substitui-o pelo caractere nulo '\0'. Essa função é necessária, pois utilizamos a função fgets() para armazenar as strings e essa função, além de armazenar nossa string, armazena também a tecla Enter que pressionamos. Sem essa função, a verificação de dados — tanto para usuário já cadastrado quanto para redefinir senha não funcionará.

Função resetar_senha: Essa função localiza o índice do usuário logado por meio do número da conta e pede que ele confirme todos os dados cadastrados. Caso algum dado seja digitado incorretamente, a função será interrompida e retornará ao menu inicial deslogado. Caso todos os dados sejam confirmados corretamente, será possível alterar a senha.

Função exibir_dados: Recebe como parâmetro o índice do usuário logado e exibe os dados cadastrados em seu vetor, com exceção da senha.

Testes realizados: Nos testes realizados em chamada pelo Discord corrigimos gradativamente os problemas apresentados em cada função. A ultima versão do código funciona perfeitamente em todas as funções e apresentou resultados satisfatórios cumprindo perfeitamente a proposta do projeto. Faremos demonstrações em sala de aula no dia da apresentação.

Modularização: Importamos as funções por meio de arquivos de cabeçalho com extensão .h em função de mantermos as boas práticas de programação.
